// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package anticrawl

import (
	"bytes"
	"code.byted.org/gopkg/thrift"
	"code.byted.org/whale/ginentry/thrift_gen/base"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var GoUnusedProtection__ int

type AnticrawlRequest struct {
	VersionCode int32             `thrift:"VersionCode,1,required" json:"VersionCode"`
	Domain      string            `thrift:"Domain,2,required" json:"Domain"`
	Path        string            `thrift:"Path,3,required" json:"Path"`
	Headers     map[string]string `thrift:"Headers,4,required" json:"Headers"`
	Queries     map[string]string `thrift:"Queries,5" json:"Queries"`
	Body        *string           `thrift:"Body,6" json:"Body"`
	AnticEnv    map[string]string `thrift:"AnticEnv,7" json:"AnticEnv"`
	// unused fields # 8 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewAnticrawlRequest() *AnticrawlRequest {
	return &AnticrawlRequest{}
}

func (p *AnticrawlRequest) GetVersionCode() int32 {
	return p.VersionCode
}

func (p *AnticrawlRequest) GetDomain() string {
	return p.Domain
}

func (p *AnticrawlRequest) GetPath() string {
	return p.Path
}

func (p *AnticrawlRequest) GetHeaders() map[string]string {
	return p.Headers
}

var AnticrawlRequest_Queries_DEFAULT map[string]string

func (p *AnticrawlRequest) GetQueries() map[string]string {
	return p.Queries
}

var AnticrawlRequest_Body_DEFAULT string

func (p *AnticrawlRequest) GetBody() string {
	if !p.IsSetBody() {
		return AnticrawlRequest_Body_DEFAULT
	}
	return *p.Body
}

var AnticrawlRequest_AnticEnv_DEFAULT map[string]string

func (p *AnticrawlRequest) GetAnticEnv() map[string]string {
	return p.AnticEnv
}

var AnticrawlRequest_Base_DEFAULT *base.Base

func (p *AnticrawlRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return AnticrawlRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *AnticrawlRequest) IsSetQueries() bool {
	return p.Queries != nil
}

func (p *AnticrawlRequest) IsSetBody() bool {
	return p.Body != nil
}

func (p *AnticrawlRequest) IsSetAnticEnv() bool {
	return p.AnticEnv != nil
}

func (p *AnticrawlRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *AnticrawlRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.ReadField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.ReadField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.ReadField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.ReadField7(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AnticrawlRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.VersionCode = v
	}
	return nil
}

func (p *AnticrawlRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.Domain = v
	}
	return nil
}

func (p *AnticrawlRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Path = v
	}
	return nil
}

func (p *AnticrawlRequest) ReadField4(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Headers = tMap
	for i := 0; i < size; i++ {
		var _key0 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key0 = v
		}
		var _val1 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val1 = v
		}
		p.Headers[_key0] = _val1
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *AnticrawlRequest) ReadField5(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.Queries = tMap
	for i := 0; i < size; i++ {
		var _key2 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key2 = v
		}
		var _val3 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val3 = v
		}
		p.Queries[_key2] = _val3
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *AnticrawlRequest) ReadField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 6: %s", err)
	} else {
		p.Body = &v
	}
	return nil
}

func (p *AnticrawlRequest) ReadField7(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s", err)
	}
	tMap := make(map[string]string, size)
	p.AnticEnv = tMap
	for i := 0; i < size; i++ {
		var _key4 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_key4 = v
		}
		var _val5 string
		if v, err := iprot.ReadString(); err != nil {
			return fmt.Errorf("error reading field 0: %s", err)
		} else {
			_val5 = v
		}
		p.AnticEnv[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s", err)
	}
	return nil
}

func (p *AnticrawlRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *AnticrawlRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AnticrawlRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AnticrawlRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("VersionCode", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:VersionCode: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.VersionCode)); err != nil {
		return fmt.Errorf("%T.VersionCode (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:VersionCode: %s", p, err)
	}
	return err
}

func (p *AnticrawlRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Domain", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:Domain: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Domain)); err != nil {
		return fmt.Errorf("%T.Domain (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:Domain: %s", p, err)
	}
	return err
}

func (p *AnticrawlRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Path", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:Path: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Path)); err != nil {
		return fmt.Errorf("%T.Path (3) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:Path: %s", p, err)
	}
	return err
}

func (p *AnticrawlRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Headers", thrift.MAP, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:Headers: %s", p, err)
	}
	if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Headers)); err != nil {
		return fmt.Errorf("error writing map begin: %s", err)
	}
	for k, v := range p.Headers {
		if err := oprot.WriteString(string(k)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
		if err := oprot.WriteString(string(v)); err != nil {
			return fmt.Errorf("%T. (0) field write error: %s", p, err)
		}
	}
	if err := oprot.WriteMapEnd(); err != nil {
		return fmt.Errorf("error writing map end: %s", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:Headers: %s", p, err)
	}
	return err
}

func (p *AnticrawlRequest) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetQueries() {
		if err := oprot.WriteFieldBegin("Queries", thrift.MAP, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:Queries: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Queries)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.Queries {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:Queries: %s", p, err)
		}
	}
	return err
}

func (p *AnticrawlRequest) writeField6(oprot thrift.TProtocol) (err error) {
	if p.IsSetBody() {
		if err := oprot.WriteFieldBegin("Body", thrift.STRING, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:Body: %s", p, err)
		}
		if err := oprot.WriteString(string(*p.Body)); err != nil {
			return fmt.Errorf("%T.Body (6) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:Body: %s", p, err)
		}
	}
	return err
}

func (p *AnticrawlRequest) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAnticEnv() {
		if err := oprot.WriteFieldBegin("AnticEnv", thrift.MAP, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:AnticEnv: %s", p, err)
		}
		if err := oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.AnticEnv)); err != nil {
			return fmt.Errorf("error writing map begin: %s", err)
		}
		for k, v := range p.AnticEnv {
			if err := oprot.WriteString(string(k)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
			if err := oprot.WriteString(string(v)); err != nil {
				return fmt.Errorf("%T. (0) field write error: %s", p, err)
			}
		}
		if err := oprot.WriteMapEnd(); err != nil {
			return fmt.Errorf("error writing map end: %s", err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:AnticEnv: %s", p, err)
		}
	}
	return err
}

func (p *AnticrawlRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
		}
	}
	return err
}

func (p *AnticrawlRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnticrawlRequest(%+v)", *p)
}

type Decision struct {
	Decision     string `thrift:"Decision,1,required" json:"Decision"`
	DecisionConf string `thrift:"DecisionConf,2,required" json:"DecisionConf"`
}

func NewDecision() *Decision {
	return &Decision{}
}

func (p *Decision) GetDecision() string {
	return p.Decision
}

func (p *Decision) GetDecisionConf() string {
	return p.DecisionConf
}
func (p *Decision) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Decision) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.Decision = v
	}
	return nil
}

func (p *Decision) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.DecisionConf = v
	}
	return nil
}

func (p *Decision) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Decision"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *Decision) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Decision", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Decision: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Decision)); err != nil {
		return fmt.Errorf("%T.Decision (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Decision: %s", p, err)
	}
	return err
}

func (p *Decision) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("DecisionConf", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:DecisionConf: %s", p, err)
	}
	if err := oprot.WriteString(string(p.DecisionConf)); err != nil {
		return fmt.Errorf("%T.DecisionConf (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:DecisionConf: %s", p, err)
	}
	return err
}

func (p *Decision) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Decision(%+v)", *p)
}

type AnticrawlResponse struct {
	Decision *Decision `thrift:"Decision,1,required" json:"Decision"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255" json:"BaseResp"`
}

func NewAnticrawlResponse() *AnticrawlResponse {
	return &AnticrawlResponse{}
}

var AnticrawlResponse_Decision_DEFAULT *Decision

func (p *AnticrawlResponse) GetDecision() *Decision {
	if !p.IsSetDecision() {
		return AnticrawlResponse_Decision_DEFAULT
	}
	return p.Decision
}

var AnticrawlResponse_BaseResp_DEFAULT *base.BaseResp

func (p *AnticrawlResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return AnticrawlResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *AnticrawlResponse) IsSetDecision() bool {
	return p.Decision != nil
}

func (p *AnticrawlResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *AnticrawlResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AnticrawlResponse) ReadField1(iprot thrift.TProtocol) error {
	p.Decision = &Decision{}
	if err := p.Decision.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Decision, err)
	}
	return nil
}

func (p *AnticrawlResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *AnticrawlResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AnticrawlResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AnticrawlResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Decision", thrift.STRUCT, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:Decision: %s", p, err)
	}
	if err := p.Decision.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.Decision, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:Decision: %s", p, err)
	}
	return err
}

func (p *AnticrawlResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBaseResp() {
		if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
		}
		if err := p.BaseResp.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
		}
	}
	return err
}

func (p *AnticrawlResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AnticrawlResponse(%+v)", *p)
}
