// Autogenerated by Thrift Compiler (0.9.2)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package session

import (
	"bytes"
	"code.byted.org/gopkg/thrift"
	"code.byted.org/passport/session_lib/goclient/thrift_gen/base"
	"fmt"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var _ = base.GoUnusedProtection__
var GoUnusedProtection__ int

type ERR int64

const (
	ERR_SUCCESS                 ERR = 0
	ERR_KEY_TOO_LONG            ERR = 132096
	ERR_GET_WRITE_REDIS         ERR = 132097
	ERR_GET_READ_REDIS          ERR = 132098
	ERR_GET_DB                  ERR = 132099
	ERR_JSON_DECODE             ERR = 132100
	ERR_SAVE_SESSION            ERR = 132101
	ERR_READ_ALL_CACHE_BACKENDS ERR = 132102
	ERR_JSON_ENCODE             ERR = 132103
	ERR_DEL_SESSION             ERR = 132104
	ERR_SESSION_KEY_NOT_EXISTS  ERR = 132105
	ERR_DUPLICATE_ENTRY         ERR = 132106
	ERR_WRITE_DB                ERR = 132107
	ERR_WRITE_MASTER_DC_REDIS   ERR = 132108
	ERR_WRITE_SLAVE_DC_NSQ      ERR = 132109
	ERR_SEND_TO_NSQ             ERR = 132110
	ERR_GET_WRITE_NSQ           ERR = 132111
)

func (p ERR) String() string {
	switch p {
	case ERR_SUCCESS:
		return "ERR_SUCCESS"
	case ERR_KEY_TOO_LONG:
		return "ERR_KEY_TOO_LONG"
	case ERR_GET_WRITE_REDIS:
		return "ERR_GET_WRITE_REDIS"
	case ERR_GET_READ_REDIS:
		return "ERR_GET_READ_REDIS"
	case ERR_GET_DB:
		return "ERR_GET_DB"
	case ERR_JSON_DECODE:
		return "ERR_JSON_DECODE"
	case ERR_SAVE_SESSION:
		return "ERR_SAVE_SESSION"
	case ERR_READ_ALL_CACHE_BACKENDS:
		return "ERR_READ_ALL_CACHE_BACKENDS"
	case ERR_JSON_ENCODE:
		return "ERR_JSON_ENCODE"
	case ERR_DEL_SESSION:
		return "ERR_DEL_SESSION"
	case ERR_SESSION_KEY_NOT_EXISTS:
		return "ERR_SESSION_KEY_NOT_EXISTS"
	case ERR_DUPLICATE_ENTRY:
		return "ERR_DUPLICATE_ENTRY"
	case ERR_WRITE_DB:
		return "ERR_WRITE_DB"
	case ERR_WRITE_MASTER_DC_REDIS:
		return "ERR_WRITE_MASTER_DC_REDIS"
	case ERR_WRITE_SLAVE_DC_NSQ:
		return "ERR_WRITE_SLAVE_DC_NSQ"
	case ERR_SEND_TO_NSQ:
		return "ERR_SEND_TO_NSQ"
	case ERR_GET_WRITE_NSQ:
		return "ERR_GET_WRITE_NSQ"
	}
	return "<UNSET>"
}

func ERRFromString(s string) (ERR, error) {
	switch s {
	case "ERR_SUCCESS":
		return ERR_SUCCESS, nil
	case "ERR_KEY_TOO_LONG":
		return ERR_KEY_TOO_LONG, nil
	case "ERR_GET_WRITE_REDIS":
		return ERR_GET_WRITE_REDIS, nil
	case "ERR_GET_READ_REDIS":
		return ERR_GET_READ_REDIS, nil
	case "ERR_GET_DB":
		return ERR_GET_DB, nil
	case "ERR_JSON_DECODE":
		return ERR_JSON_DECODE, nil
	case "ERR_SAVE_SESSION":
		return ERR_SAVE_SESSION, nil
	case "ERR_READ_ALL_CACHE_BACKENDS":
		return ERR_READ_ALL_CACHE_BACKENDS, nil
	case "ERR_JSON_ENCODE":
		return ERR_JSON_ENCODE, nil
	case "ERR_DEL_SESSION":
		return ERR_DEL_SESSION, nil
	case "ERR_SESSION_KEY_NOT_EXISTS":
		return ERR_SESSION_KEY_NOT_EXISTS, nil
	case "ERR_DUPLICATE_ENTRY":
		return ERR_DUPLICATE_ENTRY, nil
	case "ERR_WRITE_DB":
		return ERR_WRITE_DB, nil
	case "ERR_WRITE_MASTER_DC_REDIS":
		return ERR_WRITE_MASTER_DC_REDIS, nil
	case "ERR_WRITE_SLAVE_DC_NSQ":
		return ERR_WRITE_SLAVE_DC_NSQ, nil
	case "ERR_SEND_TO_NSQ":
		return ERR_SEND_TO_NSQ, nil
	case "ERR_GET_WRITE_NSQ":
		return ERR_GET_WRITE_NSQ, nil
	}
	return ERR(0), fmt.Errorf("not a valid ERR string")
}

func ERRPtr(v ERR) *ERR { return &v }

type AddRequest struct {
	SessionKey  string `thrift:"SessionKey,1,required" json:"SessionKey"`
	SessionData string `thrift:"SessionData,2,required" json:"SessionData"`
	Ttl         int32  `thrift:"Ttl,3" json:"Ttl"`
	// unused fields # 4 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewAddRequest() *AddRequest {
	return &AddRequest{
		SessionData: "{}",

		Ttl: 10,
	}
}

func (p *AddRequest) GetSessionKey() string {
	return p.SessionKey
}

func (p *AddRequest) GetSessionData() string {
	return p.SessionData
}

var AddRequest_Ttl_DEFAULT int32 = 10

func (p *AddRequest) GetTtl() int32 {
	return p.Ttl
}

var AddRequest_Base_DEFAULT *base.Base

func (p *AddRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return AddRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *AddRequest) IsSetTtl() bool {
	return p.Ttl != AddRequest_Ttl_DEFAULT
}

func (p *AddRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *AddRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *AddRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionData = v
	}
	return nil
}

func (p *AddRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Ttl = v
	}
	return nil
}

func (p *AddRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *AddRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SessionKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:SessionKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionKey)); err != nil {
		return fmt.Errorf("%T.SessionKey (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:SessionKey: %s", p, err)
	}
	return err
}

func (p *AddRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SessionData", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:SessionData: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionData)); err != nil {
		return fmt.Errorf("%T.SessionData (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:SessionData: %s", p, err)
	}
	return err
}

func (p *AddRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTtl() {
		if err := oprot.WriteFieldBegin("Ttl", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Ttl: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Ttl)); err != nil {
			return fmt.Errorf("%T.Ttl (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Ttl: %s", p, err)
		}
	}
	return err
}

func (p *AddRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
		}
	}
	return err
}

func (p *AddRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddRequest(%+v)", *p)
}

type AddResponse struct {
	SessionKey string `thrift:"SessionKey,1" json:"SessionKey"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255,required" json:"BaseResp"`
}

func NewAddResponse() *AddResponse {
	return &AddResponse{}
}

var AddResponse_SessionKey_DEFAULT string = ""

func (p *AddResponse) GetSessionKey() string {
	return p.SessionKey
}

var AddResponse_BaseResp_DEFAULT *base.BaseResp

func (p *AddResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return AddResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *AddResponse) IsSetSessionKey() bool {
	return p.SessionKey != AddResponse_SessionKey_DEFAULT
}

func (p *AddResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *AddResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AddResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *AddResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *AddResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AddResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *AddResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionKey() {
		if err := oprot.WriteFieldBegin("SessionKey", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:SessionKey: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SessionKey)); err != nil {
			return fmt.Errorf("%T.SessionKey (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:SessionKey: %s", p, err)
		}
	}
	return err
}

func (p *AddResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *AddResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AddResponse(%+v)", *p)
}

type UpdateRequest struct {
	SessionKey  string `thrift:"SessionKey,1,required" json:"SessionKey"`
	SessionData string `thrift:"SessionData,2,required" json:"SessionData"`
	Ttl         int32  `thrift:"Ttl,3" json:"Ttl"`
	// unused fields # 4 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewUpdateRequest() *UpdateRequest {
	return &UpdateRequest{
		SessionData: "{}",

		Ttl: 10,
	}
}

func (p *UpdateRequest) GetSessionKey() string {
	return p.SessionKey
}

func (p *UpdateRequest) GetSessionData() string {
	return p.SessionData
}

var UpdateRequest_Ttl_DEFAULT int32 = 10

func (p *UpdateRequest) GetTtl() int32 {
	return p.Ttl
}

var UpdateRequest_Base_DEFAULT *base.Base

func (p *UpdateRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return UpdateRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *UpdateRequest) IsSetTtl() bool {
	return p.Ttl != UpdateRequest_Ttl_DEFAULT
}

func (p *UpdateRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *UpdateRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.ReadField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.ReadField3(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *UpdateRequest) ReadField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s", err)
	} else {
		p.SessionData = v
	}
	return nil
}

func (p *UpdateRequest) ReadField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 3: %s", err)
	} else {
		p.Ttl = v
	}
	return nil
}

func (p *UpdateRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *UpdateRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SessionKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:SessionKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionKey)); err != nil {
		return fmt.Errorf("%T.SessionKey (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:SessionKey: %s", p, err)
	}
	return err
}

func (p *UpdateRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SessionData", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:SessionData: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionData)); err != nil {
		return fmt.Errorf("%T.SessionData (2) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:SessionData: %s", p, err)
	}
	return err
}

func (p *UpdateRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTtl() {
		if err := oprot.WriteFieldBegin("Ttl", thrift.I32, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:Ttl: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Ttl)); err != nil {
			return fmt.Errorf("%T.Ttl (3) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:Ttl: %s", p, err)
		}
	}
	return err
}

func (p *UpdateRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
		}
	}
	return err
}

func (p *UpdateRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateRequest(%+v)", *p)
}

type UpdateResponse struct {
	SessionKey string `thrift:"SessionKey,1" json:"SessionKey"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255,required" json:"BaseResp"`
}

func NewUpdateResponse() *UpdateResponse {
	return &UpdateResponse{}
}

var UpdateResponse_SessionKey_DEFAULT string = ""

func (p *UpdateResponse) GetSessionKey() string {
	return p.SessionKey
}

var UpdateResponse_BaseResp_DEFAULT *base.BaseResp

func (p *UpdateResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return UpdateResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *UpdateResponse) IsSetSessionKey() bool {
	return p.SessionKey != UpdateResponse_SessionKey_DEFAULT
}

func (p *UpdateResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *UpdateResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *UpdateResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *UpdateResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *UpdateResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("UpdateResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *UpdateResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionKey() {
		if err := oprot.WriteFieldBegin("SessionKey", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:SessionKey: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SessionKey)); err != nil {
			return fmt.Errorf("%T.SessionKey (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:SessionKey: %s", p, err)
		}
	}
	return err
}

func (p *UpdateResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *UpdateResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("UpdateResponse(%+v)", *p)
}

type GetRequest struct {
	SessionKey string `thrift:"SessionKey,1,required" json:"SessionKey"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewGetRequest() *GetRequest {
	return &GetRequest{}
}

func (p *GetRequest) GetSessionKey() string {
	return p.SessionKey
}

var GetRequest_Base_DEFAULT *base.Base

func (p *GetRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return GetRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *GetRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *GetRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SessionKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:SessionKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionKey)); err != nil {
		return fmt.Errorf("%T.SessionKey (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:SessionKey: %s", p, err)
	}
	return err
}

func (p *GetRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
		}
	}
	return err
}

func (p *GetRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetRequest(%+v)", *p)
}

type GetResponse struct {
	SessionData string `thrift:"SessionData,1" json:"SessionData"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255,required" json:"BaseResp"`
}

func NewGetResponse() *GetResponse {
	return &GetResponse{
		SessionData: "{}",
	}
}

var GetResponse_SessionData_DEFAULT string = "{}"

func (p *GetResponse) GetSessionData() string {
	return p.SessionData
}

var GetResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return GetResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetResponse) IsSetSessionData() bool {
	return p.SessionData != GetResponse_SessionData_DEFAULT
}

func (p *GetResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *GetResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionData = v
	}
	return nil
}

func (p *GetResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *GetResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("GetResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *GetResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionData() {
		if err := oprot.WriteFieldBegin("SessionData", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:SessionData: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SessionData)); err != nil {
			return fmt.Errorf("%T.SessionData (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:SessionData: %s", p, err)
		}
	}
	return err
}

func (p *GetResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *GetResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetResponse(%+v)", *p)
}

type DelRequest struct {
	SessionKey string `thrift:"SessionKey,1,required" json:"SessionKey"`
	// unused fields # 2 to 254
	Base *base.Base `thrift:"Base,255" json:"Base"`
}

func NewDelRequest() *DelRequest {
	return &DelRequest{}
}

func (p *DelRequest) GetSessionKey() string {
	return p.SessionKey
}

var DelRequest_Base_DEFAULT *base.Base

func (p *DelRequest) GetBase() *base.Base {
	if !p.IsSetBase() {
		return DelRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *DelRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *DelRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DelRequest) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *DelRequest) ReadField255(iprot thrift.TProtocol) error {
	p.Base = &base.Base{}
	if err := p.Base.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Base, err)
	}
	return nil
}

func (p *DelRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DelRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DelRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("SessionKey", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:SessionKey: %s", p, err)
	}
	if err := oprot.WriteString(string(p.SessionKey)); err != nil {
		return fmt.Errorf("%T.SessionKey (1) field write error: %s", p, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:SessionKey: %s", p, err)
	}
	return err
}

func (p *DelRequest) writeField255(oprot thrift.TProtocol) (err error) {
	if p.IsSetBase() {
		if err := oprot.WriteFieldBegin("Base", thrift.STRUCT, 255); err != nil {
			return fmt.Errorf("%T write field begin error 255:Base: %s", p, err)
		}
		if err := p.Base.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Base, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 255:Base: %s", p, err)
		}
	}
	return err
}

func (p *DelRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelRequest(%+v)", *p)
}

type DelResponse struct {
	SessionKey string `thrift:"SessionKey,1" json:"SessionKey"`
	// unused fields # 2 to 254
	BaseResp *base.BaseResp `thrift:"BaseResp,255,required" json:"BaseResp"`
}

func NewDelResponse() *DelResponse {
	return &DelResponse{}
}

var DelResponse_SessionKey_DEFAULT string = ""

func (p *DelResponse) GetSessionKey() string {
	return p.SessionKey
}

var DelResponse_BaseResp_DEFAULT *base.BaseResp

func (p *DelResponse) GetBaseResp() *base.BaseResp {
	if !p.IsSetBaseResp() {
		return DelResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *DelResponse) IsSetSessionKey() bool {
	return p.SessionKey != DelResponse_SessionKey_DEFAULT
}

func (p *DelResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *DelResponse) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error: %s", p, err)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.ReadField1(iprot); err != nil {
				return err
			}
		case 255:
			if err := p.ReadField255(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *DelResponse) ReadField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s", err)
	} else {
		p.SessionKey = v
	}
	return nil
}

func (p *DelResponse) ReadField255(iprot thrift.TProtocol) error {
	p.BaseResp = &base.BaseResp{}
	if err := p.BaseResp.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.BaseResp, err)
	}
	return nil
}

func (p *DelResponse) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("DelResponse"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField255(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("write struct stop error: %s", err)
	}
	return nil
}

func (p *DelResponse) writeField1(oprot thrift.TProtocol) (err error) {
	if p.IsSetSessionKey() {
		if err := oprot.WriteFieldBegin("SessionKey", thrift.STRING, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:SessionKey: %s", p, err)
		}
		if err := oprot.WriteString(string(p.SessionKey)); err != nil {
			return fmt.Errorf("%T.SessionKey (1) field write error: %s", p, err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:SessionKey: %s", p, err)
		}
	}
	return err
}

func (p *DelResponse) writeField255(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("BaseResp", thrift.STRUCT, 255); err != nil {
		return fmt.Errorf("%T write field begin error 255:BaseResp: %s", p, err)
	}
	if err := p.BaseResp.Write(oprot); err != nil {
		return fmt.Errorf("%T error writing struct: %s", p.BaseResp, err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 255:BaseResp: %s", p, err)
	}
	return err
}

func (p *DelResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("DelResponse(%+v)", *p)
}
