// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server_impression.proto

/*
Package pb_server_impression is a generated protocol buffer package.

It is generated from these files:
	server_impression.proto

It has these top-level messages:
	ServerImpression
*/
package pb_server_impression

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 请求类型
type RequestType int32

const (
	RequestType_REQUEST_OPEN     RequestType = 0
	RequestType_REQUEST_REFRESH  RequestType = 1
	RequestType_REQUEST_LOADMORE RequestType = 2
	RequestType_REQUEST_PUSH     RequestType = 3
	RequestType_REQUEST_UNKNOWN  RequestType = 4
)

var RequestType_name = map[int32]string{
	0: "REQUEST_OPEN",
	1: "REQUEST_REFRESH",
	2: "REQUEST_LOADMORE",
	3: "REQUEST_PUSH",
	4: "REQUEST_UNKNOWN",
}
var RequestType_value = map[string]int32{
	"REQUEST_OPEN":     0,
	"REQUEST_REFRESH":  1,
	"REQUEST_LOADMORE": 2,
	"REQUEST_PUSH":     3,
	"REQUEST_UNKNOWN":  4,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}
func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}
func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}
func (RequestType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// 流量类型
type TrafficType int32

const (
	TrafficType_TRAFFIC_APP     TrafficType = 0
	TrafficType_TRAFFIC_WEB     TrafficType = 1
	TrafficType_TRAFFIC_WAP     TrafficType = 2
	TrafficType_TRAFFIC_WEIXIN  TrafficType = 3
	TrafficType_TRAFFIC_SDK     TrafficType = 4
	TrafficType_TRAFFIC_OPEN    TrafficType = 5
	TrafficType_TRAFFIC_PARTNER TrafficType = 6
	TrafficType_TRAFFIC_UNKNOWN TrafficType = 7
)

var TrafficType_name = map[int32]string{
	0: "TRAFFIC_APP",
	1: "TRAFFIC_WEB",
	2: "TRAFFIC_WAP",
	3: "TRAFFIC_WEIXIN",
	4: "TRAFFIC_SDK",
	5: "TRAFFIC_OPEN",
	6: "TRAFFIC_PARTNER",
	7: "TRAFFIC_UNKNOWN",
}
var TrafficType_value = map[string]int32{
	"TRAFFIC_APP":     0,
	"TRAFFIC_WEB":     1,
	"TRAFFIC_WAP":     2,
	"TRAFFIC_WEIXIN":  3,
	"TRAFFIC_SDK":     4,
	"TRAFFIC_OPEN":    5,
	"TRAFFIC_PARTNER": 6,
	"TRAFFIC_UNKNOWN": 7,
}

func (x TrafficType) Enum() *TrafficType {
	p := new(TrafficType)
	*p = x
	return p
}
func (x TrafficType) String() string {
	return proto.EnumName(TrafficType_name, int32(x))
}
func (x *TrafficType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(TrafficType_value, data, "TrafficType")
	if err != nil {
		return err
	}
	*x = TrafficType(value)
	return nil
}
func (TrafficType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// 网络访问类型
type AccessType int32

const (
	AccessType_ACCESS_WIFI      AccessType = 1
	AccessType_ACCESS_MOBILE    AccessType = 2
	AccessType_ACCESS_MOBILE_3G AccessType = 3
	AccessType_ACCESS_MOBILE_4G AccessType = 4
	AccessType_ACCESS_WEB       AccessType = 10
	AccessType_ACCESS_WAP       AccessType = 11
	AccessType_ACCESS_UNKNOWN   AccessType = 12
)

var AccessType_name = map[int32]string{
	1:  "ACCESS_WIFI",
	2:  "ACCESS_MOBILE",
	3:  "ACCESS_MOBILE_3G",
	4:  "ACCESS_MOBILE_4G",
	10: "ACCESS_WEB",
	11: "ACCESS_WAP",
	12: "ACCESS_UNKNOWN",
}
var AccessType_value = map[string]int32{
	"ACCESS_WIFI":      1,
	"ACCESS_MOBILE":    2,
	"ACCESS_MOBILE_3G": 3,
	"ACCESS_MOBILE_4G": 4,
	"ACCESS_WEB":       10,
	"ACCESS_WAP":       11,
	"ACCESS_UNKNOWN":   12,
}

func (x AccessType) Enum() *AccessType {
	p := new(AccessType)
	*p = x
	return p
}
func (x AccessType) String() string {
	return proto.EnumName(AccessType_name, int32(x))
}
func (x *AccessType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(AccessType_value, data, "AccessType")
	if err != nil {
		return err
	}
	*x = AccessType(value)
	return nil
}
func (AccessType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// 消息体
type ServerImpression struct {
	Caller           *string                    `protobuf:"bytes,1,req,name=caller" json:"caller,omitempty"`
	ServerTime       *uint32                    `protobuf:"varint,2,req,name=server_time,json=serverTime" json:"server_time,omitempty"`
	ImprId           *string                    `protobuf:"bytes,3,req,name=impr_id,json=imprId" json:"impr_id,omitempty"`
	ImprType         *string                    `protobuf:"bytes,4,req,name=impr_type,json=imprType" json:"impr_type,omitempty"`
	ImprFrom         *string                    `protobuf:"bytes,5,req,name=impr_from,json=imprFrom" json:"impr_from,omitempty"`
	RequestType      *RequestType               `protobuf:"varint,6,req,name=request_type,json=requestType,enum=pb_server_impression.RequestType" json:"request_type,omitempty"`
	TrafficType      *TrafficType               `protobuf:"varint,7,req,name=traffic_type,json=trafficType,enum=pb_server_impression.TrafficType" json:"traffic_type,omitempty"`
	User             *ServerImpression_User     `protobuf:"bytes,8,req,name=user" json:"user,omitempty"`
	Request          *ServerImpression_Request  `protobuf:"bytes,9,req,name=request" json:"request,omitempty"`
	Results          []*ServerImpression_Result `protobuf:"bytes,10,rep,name=results" json:"results,omitempty"`
	XStagingFlag     *bool                      `protobuf:"varint,11,opt,name=_staging_flag,json=StagingFlag" json:"_staging_flag,omitempty"`
	AbClient         *string                    `protobuf:"bytes,12,opt,name=ab_client,json=abClient" json:"ab_client,omitempty"`
	AbVersion        *string                    `protobuf:"bytes,13,opt,name=ab_version,json=abVersion" json:"ab_version,omitempty"`
	UtmSource        *string                    `protobuf:"bytes,14,opt,name=utm_source,json=utmSource" json:"utm_source,omitempty"`
	UtmMedium        *string                    `protobuf:"bytes,15,opt,name=utm_medium,json=utmMedium" json:"utm_medium,omitempty"`
	UtmCampaign      *string                    `protobuf:"bytes,16,opt,name=utm_campaign,json=utmCampaign" json:"utm_campaign,omitempty"`
	ClientIp         *string                    `protobuf:"bytes,17,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	ChannelId        *uint64                    `protobuf:"varint,18,opt,name=channel_id,json=channelId" json:"channel_id,omitempty"`
	SubjectId        *uint64                    `protobuf:"varint,19,opt,name=subject_id,json=subjectId" json:"subject_id,omitempty"`
	PgcId            *uint64                    `protobuf:"varint,20,opt,name=pgc_id,json=pgcId" json:"pgc_id,omitempty"`
	SearchQuery      *string                    `protobuf:"bytes,21,opt,name=search_query,json=searchQuery" json:"search_query,omitempty"`
	SearchSource     *string                    `protobuf:"bytes,22,opt,name=search_source,json=searchSource" json:"search_source,omitempty"`
	RelatedGid       *string                    `protobuf:"bytes,23,opt,name=related_gid,json=relatedGid" json:"related_gid,omitempty"`
	ResponseLatency  *uint32                    `protobuf:"varint,24,opt,name=response_latency,json=responseLatency" json:"response_latency,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *ServerImpression) Reset()                    { *m = ServerImpression{} }
func (m *ServerImpression) String() string            { return proto.CompactTextString(m) }
func (*ServerImpression) ProtoMessage()               {}
func (*ServerImpression) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ServerImpression) GetCaller() string {
	if m != nil && m.Caller != nil {
		return *m.Caller
	}
	return ""
}

func (m *ServerImpression) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *ServerImpression) GetImprId() string {
	if m != nil && m.ImprId != nil {
		return *m.ImprId
	}
	return ""
}

func (m *ServerImpression) GetImprType() string {
	if m != nil && m.ImprType != nil {
		return *m.ImprType
	}
	return ""
}

func (m *ServerImpression) GetImprFrom() string {
	if m != nil && m.ImprFrom != nil {
		return *m.ImprFrom
	}
	return ""
}

func (m *ServerImpression) GetRequestType() RequestType {
	if m != nil && m.RequestType != nil {
		return *m.RequestType
	}
	return RequestType_REQUEST_OPEN
}

func (m *ServerImpression) GetTrafficType() TrafficType {
	if m != nil && m.TrafficType != nil {
		return *m.TrafficType
	}
	return TrafficType_TRAFFIC_APP
}

func (m *ServerImpression) GetUser() *ServerImpression_User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ServerImpression) GetRequest() *ServerImpression_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *ServerImpression) GetResults() []*ServerImpression_Result {
	if m != nil {
		return m.Results
	}
	return nil
}

func (m *ServerImpression) GetXStagingFlag() bool {
	if m != nil && m.XStagingFlag != nil {
		return *m.XStagingFlag
	}
	return false
}

func (m *ServerImpression) GetAbClient() string {
	if m != nil && m.AbClient != nil {
		return *m.AbClient
	}
	return ""
}

func (m *ServerImpression) GetAbVersion() string {
	if m != nil && m.AbVersion != nil {
		return *m.AbVersion
	}
	return ""
}

func (m *ServerImpression) GetUtmSource() string {
	if m != nil && m.UtmSource != nil {
		return *m.UtmSource
	}
	return ""
}

func (m *ServerImpression) GetUtmMedium() string {
	if m != nil && m.UtmMedium != nil {
		return *m.UtmMedium
	}
	return ""
}

func (m *ServerImpression) GetUtmCampaign() string {
	if m != nil && m.UtmCampaign != nil {
		return *m.UtmCampaign
	}
	return ""
}

func (m *ServerImpression) GetClientIp() string {
	if m != nil && m.ClientIp != nil {
		return *m.ClientIp
	}
	return ""
}

func (m *ServerImpression) GetChannelId() uint64 {
	if m != nil && m.ChannelId != nil {
		return *m.ChannelId
	}
	return 0
}

func (m *ServerImpression) GetSubjectId() uint64 {
	if m != nil && m.SubjectId != nil {
		return *m.SubjectId
	}
	return 0
}

func (m *ServerImpression) GetPgcId() uint64 {
	if m != nil && m.PgcId != nil {
		return *m.PgcId
	}
	return 0
}

func (m *ServerImpression) GetSearchQuery() string {
	if m != nil && m.SearchQuery != nil {
		return *m.SearchQuery
	}
	return ""
}

func (m *ServerImpression) GetSearchSource() string {
	if m != nil && m.SearchSource != nil {
		return *m.SearchSource
	}
	return ""
}

func (m *ServerImpression) GetRelatedGid() string {
	if m != nil && m.RelatedGid != nil {
		return *m.RelatedGid
	}
	return ""
}

func (m *ServerImpression) GetResponseLatency() uint32 {
	if m != nil && m.ResponseLatency != nil {
		return *m.ResponseLatency
	}
	return 0
}

// 用户信息
type ServerImpression_User struct {
	UserUniqueId     *string `protobuf:"bytes,1,req,name=user_unique_id,json=userUniqueId" json:"user_unique_id,omitempty"`
	UserType         *uint32 `protobuf:"varint,2,opt,name=user_type,json=userType" json:"user_type,omitempty"`
	UserId           *uint64 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	DeviceId         *uint64 `protobuf:"varint,4,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	WebId            *uint64 `protobuf:"varint,5,opt,name=web_id,json=webId" json:"web_id,omitempty"`
	UserIsAuth       *bool   `protobuf:"varint,6,opt,name=user_is_auth,json=userIsAuth" json:"user_is_auth,omitempty"`
	UserIsLogin      *bool   `protobuf:"varint,7,opt,name=user_is_login,json=userIsLogin" json:"user_is_login,omitempty"`
	UserRegisterTime *uint32 `protobuf:"varint,8,opt,name=user_register_time,json=userRegisterTime" json:"user_register_time,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServerImpression_User) Reset()                    { *m = ServerImpression_User{} }
func (m *ServerImpression_User) String() string            { return proto.CompactTextString(m) }
func (*ServerImpression_User) ProtoMessage()               {}
func (*ServerImpression_User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 0} }

func (m *ServerImpression_User) GetUserUniqueId() string {
	if m != nil && m.UserUniqueId != nil {
		return *m.UserUniqueId
	}
	return ""
}

func (m *ServerImpression_User) GetUserType() uint32 {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return 0
}

func (m *ServerImpression_User) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *ServerImpression_User) GetDeviceId() uint64 {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return 0
}

func (m *ServerImpression_User) GetWebId() uint64 {
	if m != nil && m.WebId != nil {
		return *m.WebId
	}
	return 0
}

func (m *ServerImpression_User) GetUserIsAuth() bool {
	if m != nil && m.UserIsAuth != nil {
		return *m.UserIsAuth
	}
	return false
}

func (m *ServerImpression_User) GetUserIsLogin() bool {
	if m != nil && m.UserIsLogin != nil {
		return *m.UserIsLogin
	}
	return false
}

func (m *ServerImpression_User) GetUserRegisterTime() uint32 {
	if m != nil && m.UserRegisterTime != nil {
		return *m.UserRegisterTime
	}
	return 0
}

// 客户端请求信息
type ServerImpression_Request struct {
	Extras           *string     `protobuf:"bytes,1,opt,name=extras" json:"extras,omitempty"`
	AppId            *uint32     `protobuf:"varint,2,req,name=app_id,json=appId" json:"app_id,omitempty"`
	AppName          *string     `protobuf:"bytes,3,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	AppInstallId     *uint64     `protobuf:"varint,4,opt,name=app_install_id,json=appInstallId" json:"app_install_id,omitempty"`
	AppPackage       *string     `protobuf:"bytes,5,opt,name=app_package,json=appPackage" json:"app_package,omitempty"`
	AppChannel       *string     `protobuf:"bytes,6,opt,name=app_channel,json=appChannel" json:"app_channel,omitempty"`
	AppVersion       *string     `protobuf:"bytes,7,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	OsName           *string     `protobuf:"bytes,8,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	OsVersion        *string     `protobuf:"bytes,9,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	DeviceModel      *string     `protobuf:"bytes,10,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	Latitude         *string     `protobuf:"bytes,11,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        *string     `protobuf:"bytes,12,opt,name=longitude" json:"longitude,omitempty"`
	CityId           *uint32     `protobuf:"varint,13,opt,name=city_id,json=cityId" json:"city_id,omitempty"`
	Access           *AccessType `protobuf:"varint,14,opt,name=access,enum=pb_server_impression.AccessType" json:"access,omitempty"`
	LocationAreaCode *uint32     `protobuf:"varint,15,opt,name=location_area_code,json=locationAreaCode" json:"location_area_code,omitempty"`
	CellId           *uint32     `protobuf:"varint,16,opt,name=cell_id,json=cellId" json:"cell_id,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *ServerImpression_Request) Reset()                    { *m = ServerImpression_Request{} }
func (m *ServerImpression_Request) String() string            { return proto.CompactTextString(m) }
func (*ServerImpression_Request) ProtoMessage()               {}
func (*ServerImpression_Request) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 1} }

func (m *ServerImpression_Request) GetExtras() string {
	if m != nil && m.Extras != nil {
		return *m.Extras
	}
	return ""
}

func (m *ServerImpression_Request) GetAppId() uint32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *ServerImpression_Request) GetAppName() string {
	if m != nil && m.AppName != nil {
		return *m.AppName
	}
	return ""
}

func (m *ServerImpression_Request) GetAppInstallId() uint64 {
	if m != nil && m.AppInstallId != nil {
		return *m.AppInstallId
	}
	return 0
}

func (m *ServerImpression_Request) GetAppPackage() string {
	if m != nil && m.AppPackage != nil {
		return *m.AppPackage
	}
	return ""
}

func (m *ServerImpression_Request) GetAppChannel() string {
	if m != nil && m.AppChannel != nil {
		return *m.AppChannel
	}
	return ""
}

func (m *ServerImpression_Request) GetAppVersion() string {
	if m != nil && m.AppVersion != nil {
		return *m.AppVersion
	}
	return ""
}

func (m *ServerImpression_Request) GetOsName() string {
	if m != nil && m.OsName != nil {
		return *m.OsName
	}
	return ""
}

func (m *ServerImpression_Request) GetOsVersion() string {
	if m != nil && m.OsVersion != nil {
		return *m.OsVersion
	}
	return ""
}

func (m *ServerImpression_Request) GetDeviceModel() string {
	if m != nil && m.DeviceModel != nil {
		return *m.DeviceModel
	}
	return ""
}

func (m *ServerImpression_Request) GetLatitude() string {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return ""
}

func (m *ServerImpression_Request) GetLongitude() string {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return ""
}

func (m *ServerImpression_Request) GetCityId() uint32 {
	if m != nil && m.CityId != nil {
		return *m.CityId
	}
	return 0
}

func (m *ServerImpression_Request) GetAccess() AccessType {
	if m != nil && m.Access != nil {
		return *m.Access
	}
	return AccessType_ACCESS_WIFI
}

func (m *ServerImpression_Request) GetLocationAreaCode() uint32 {
	if m != nil && m.LocationAreaCode != nil {
		return *m.LocationAreaCode
	}
	return 0
}

func (m *ServerImpression_Request) GetCellId() uint32 {
	if m != nil && m.CellId != nil {
		return *m.CellId
	}
	return 0
}

// 返回结果集
type ServerImpression_Result struct {
	Extras           *string `protobuf:"bytes,1,opt,name=extras" json:"extras,omitempty"`
	Id               *uint64 `protobuf:"varint,2,req,name=id" json:"id,omitempty"`
	ItemId           *uint64 `protobuf:"varint,3,opt,name=item_id,json=itemId" json:"item_id,omitempty"`
	SimId            *uint64 `protobuf:"varint,4,opt,name=sim_id,json=simId" json:"sim_id,omitempty"`
	ListSimId        *uint64 `protobuf:"varint,5,opt,name=list_sim_id,json=listSimId" json:"list_sim_id,omitempty"`
	OnlineReason     *string `protobuf:"bytes,6,opt,name=online_reason,json=onlineReason" json:"online_reason,omitempty"`
	OnlineTime       *uint32 `protobuf:"varint,7,opt,name=online_time,json=onlineTime" json:"online_time,omitempty"`
	Type             *string `protobuf:"bytes,8,opt,name=type" json:"type,omitempty"`
	CardId           *uint64 `protobuf:"varint,9,opt,name=card_id,json=cardId" json:"card_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ServerImpression_Result) Reset()                    { *m = ServerImpression_Result{} }
func (m *ServerImpression_Result) String() string            { return proto.CompactTextString(m) }
func (*ServerImpression_Result) ProtoMessage()               {}
func (*ServerImpression_Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0, 2} }

func (m *ServerImpression_Result) GetExtras() string {
	if m != nil && m.Extras != nil {
		return *m.Extras
	}
	return ""
}

func (m *ServerImpression_Result) GetId() uint64 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *ServerImpression_Result) GetItemId() uint64 {
	if m != nil && m.ItemId != nil {
		return *m.ItemId
	}
	return 0
}

func (m *ServerImpression_Result) GetSimId() uint64 {
	if m != nil && m.SimId != nil {
		return *m.SimId
	}
	return 0
}

func (m *ServerImpression_Result) GetListSimId() uint64 {
	if m != nil && m.ListSimId != nil {
		return *m.ListSimId
	}
	return 0
}

func (m *ServerImpression_Result) GetOnlineReason() string {
	if m != nil && m.OnlineReason != nil {
		return *m.OnlineReason
	}
	return ""
}

func (m *ServerImpression_Result) GetOnlineTime() uint32 {
	if m != nil && m.OnlineTime != nil {
		return *m.OnlineTime
	}
	return 0
}

func (m *ServerImpression_Result) GetType() string {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return ""
}

func (m *ServerImpression_Result) GetCardId() uint64 {
	if m != nil && m.CardId != nil {
		return *m.CardId
	}
	return 0
}

func init() {
	proto.RegisterType((*ServerImpression)(nil), "pb_server_impression.ServerImpression")
	proto.RegisterType((*ServerImpression_User)(nil), "pb_server_impression.ServerImpression.User")
	proto.RegisterType((*ServerImpression_Request)(nil), "pb_server_impression.ServerImpression.Request")
	proto.RegisterType((*ServerImpression_Result)(nil), "pb_server_impression.ServerImpression.Result")
	proto.RegisterEnum("pb_server_impression.RequestType", RequestType_name, RequestType_value)
	proto.RegisterEnum("pb_server_impression.TrafficType", TrafficType_name, TrafficType_value)
	proto.RegisterEnum("pb_server_impression.AccessType", AccessType_name, AccessType_value)
}

func init() { proto.RegisterFile("server_impression.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1242 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x96, 0xdd, 0x72, 0xdb, 0xb6,
	0x12, 0xc7, 0x23, 0x59, 0xd6, 0xc7, 0x52, 0x92, 0x19, 0xc4, 0x89, 0x79, 0x7c, 0x92, 0x13, 0x25,
	0x39, 0x17, 0x3a, 0x39, 0xad, 0x2e, 0xdc, 0x76, 0xa6, 0x77, 0x1d, 0x59, 0x91, 0x1d, 0x4e, 0x6c,
	0x59, 0xa1, 0xec, 0xa6, 0x77, 0x1c, 0x88, 0x84, 0x65, 0xb4, 0xfc, 0x32, 0x00, 0x26, 0xf5, 0x2b,
	0xb4, 0x37, 0x7d, 0x85, 0xbe, 0x54, 0x5f, 0xa4, 0x2f, 0xd0, 0x59, 0x00, 0xb4, 0x94, 0x8f, 0x76,
	0x72, 0xe7, 0xfd, 0xfd, 0x77, 0xd7, 0x0b, 0xec, 0x2e, 0x28, 0xd8, 0x93, 0x4c, 0xbc, 0x65, 0x22,
	0xe4, 0x69, 0x21, 0x98, 0x94, 0x3c, 0xcf, 0x46, 0x85, 0xc8, 0x55, 0x4e, 0x76, 0x8b, 0x65, 0xf8,
	0x91, 0xf6, 0xf4, 0x8f, 0x1d, 0x70, 0x17, 0x9a, 0xfa, 0xb7, 0x90, 0x3c, 0x80, 0x66, 0x44, 0x93,
	0x84, 0x09, 0xaf, 0x36, 0xa8, 0x0f, 0x3b, 0x81, 0xb5, 0xc8, 0x63, 0x70, 0x6c, 0x06, 0xc5, 0x53,
	0xe6, 0xd5, 0x07, 0xf5, 0x61, 0x2f, 0x00, 0x83, 0xce, 0x79, 0xca, 0xc8, 0x1e, 0xb4, 0x30, 0x77,
	0xc8, 0x63, 0x6f, 0xcb, 0x44, 0xa2, 0xe9, 0xc7, 0xe4, 0xdf, 0xd0, 0xd1, 0x82, 0xba, 0x29, 0x98,
	0xd7, 0xd0, 0x52, 0x1b, 0xc1, 0xf9, 0x4d, 0xc1, 0x6e, 0xc5, 0x4b, 0x91, 0xa7, 0xde, 0xf6, 0x5a,
	0x3c, 0x12, 0x79, 0x4a, 0x5e, 0x40, 0x57, 0xb0, 0xeb, 0x92, 0x49, 0x65, 0x82, 0x9b, 0x83, 0xfa,
	0xb0, 0x7f, 0xf0, 0x64, 0xf4, 0xa9, 0xd3, 0x8c, 0x02, 0xe3, 0x89, 0x59, 0x03, 0x47, 0xac, 0x0d,
	0xcc, 0xa2, 0x04, 0xbd, 0xbc, 0xe4, 0x91, 0xc9, 0xd2, 0xfa, 0xa7, 0x2c, 0xe7, 0xc6, 0xd3, 0x64,
	0x51, 0x6b, 0x83, 0x7c, 0x07, 0x8d, 0x52, 0x32, 0xe1, 0xb5, 0x07, 0xf5, 0xa1, 0x73, 0xf0, 0xff,
	0x4f, 0x47, 0x7f, 0x78, 0x9b, 0xa3, 0x0b, 0xc9, 0x44, 0xa0, 0x03, 0xc9, 0x4b, 0x68, 0xd9, 0xaa,
	0xbc, 0x8e, 0xce, 0x31, 0xfa, 0xcc, 0x1c, 0xf6, 0x60, 0x41, 0x15, 0x4e, 0x8e, 0x31, 0x93, 0x2c,
	0x13, 0x25, 0x3d, 0x18, 0x6c, 0x0d, 0x9d, 0x83, 0x2f, 0x3f, 0x3b, 0x13, 0x46, 0x05, 0x55, 0x34,
	0x79, 0x0a, 0xbd, 0x50, 0x2a, 0xba, 0xe2, 0xd9, 0x2a, 0xbc, 0x4c, 0xe8, 0xca, 0x73, 0x06, 0xb5,
	0x61, 0x3b, 0x70, 0x16, 0x86, 0x1d, 0x25, 0x74, 0x85, 0x0d, 0xa2, 0xcb, 0x30, 0x4a, 0x38, 0xcb,
	0x94, 0xd7, 0x1d, 0xd4, 0xb0, 0x41, 0x74, 0x39, 0xd1, 0x36, 0x79, 0x04, 0x40, 0x97, 0xe1, 0x5b,
	0x26, 0x30, 0xbd, 0xd7, 0xd3, 0x6a, 0x87, 0x2e, 0xbf, 0x37, 0x00, 0xe5, 0x52, 0xa5, 0xa1, 0xcc,
	0x4b, 0x11, 0x31, 0xaf, 0x6f, 0xe4, 0x52, 0xa5, 0x0b, 0x0d, 0x2a, 0x39, 0x65, 0x31, 0x2f, 0x53,
	0x6f, 0xe7, 0x56, 0x3e, 0xd5, 0x80, 0x3c, 0x81, 0x2e, 0xca, 0x11, 0x4d, 0x0b, 0xca, 0x57, 0x99,
	0xe7, 0x6a, 0x07, 0xa7, 0x54, 0xe9, 0xc4, 0x22, 0x2c, 0xce, 0x54, 0x16, 0xf2, 0xc2, 0xbb, 0x6b,
	0x8a, 0x33, 0xc0, 0x2f, 0x30, 0x7d, 0x74, 0x45, 0xb3, 0x8c, 0x25, 0x38, 0x93, 0x64, 0x50, 0x1b,
	0x36, 0x82, 0x8e, 0x25, 0x7e, 0x8c, 0xb2, 0x2c, 0x97, 0x3f, 0xb2, 0x48, 0xa1, 0x7c, 0xcf, 0xc8,
	0x96, 0xf8, 0x31, 0xb9, 0x0f, 0xcd, 0x62, 0x15, 0xa1, 0xb4, 0xab, 0xa5, 0xed, 0x62, 0x15, 0xf9,
	0x31, 0x16, 0x25, 0x19, 0x15, 0xd1, 0x55, 0x78, 0x5d, 0x32, 0x71, 0xe3, 0xdd, 0x37, 0x45, 0x19,
	0xf6, 0x1a, 0x11, 0x79, 0x06, 0x3d, 0xeb, 0x62, 0x0f, 0xfe, 0x40, 0xfb, 0xd8, 0x38, 0x7b, 0xf6,
	0xc7, 0xe0, 0x08, 0x96, 0x50, 0xc5, 0xe2, 0x70, 0xc5, 0x63, 0x6f, 0x4f, 0xbb, 0x80, 0x45, 0xc7,
	0x3c, 0x26, 0xff, 0x03, 0x57, 0x30, 0x59, 0xe4, 0x99, 0x64, 0x21, 0xc2, 0x2c, 0xba, 0xf1, 0xbc,
	0x41, 0x6d, 0xd8, 0x0b, 0x76, 0x2a, 0x7e, 0x62, 0xf0, 0xfe, 0x2f, 0x75, 0x68, 0xe0, 0xa0, 0x91,
	0xff, 0x42, 0x1f, 0x47, 0x2d, 0x2c, 0x33, 0x7e, 0x5d, 0x32, 0xac, 0xdd, 0xec, 0x70, 0x17, 0xe9,
	0x85, 0x86, 0x66, 0x1f, 0xb5, 0x97, 0x5e, 0x86, 0xba, 0x4e, 0xd9, 0x46, 0xa0, 0xc7, 0x7c, 0x0f,
	0x5a, 0x5a, 0xd4, 0x5b, 0x8c, 0xe7, 0x6e, 0xa2, 0x69, 0xa2, 0x62, 0xf6, 0x96, 0x47, 0x3a, 0x6d,
	0x43, 0x4b, 0x6d, 0x03, 0xcc, 0x65, 0xbd, 0x63, 0x4b, 0x54, 0xb6, 0xcd, 0x65, 0xbd, 0x63, 0x4b,
	0x3f, 0x26, 0x03, 0xe8, 0x9a, 0x64, 0x32, 0xa4, 0xa5, 0xba, 0xf2, 0x9a, 0x7a, 0xbc, 0x40, 0x67,
	0x94, 0xe3, 0x52, 0x5d, 0xe1, 0x04, 0x56, 0x1e, 0x49, 0xbe, 0xe2, 0x99, 0xd7, 0x32, 0x13, 0x68,
	0x5c, 0x4e, 0x10, 0x91, 0x2f, 0x80, 0x68, 0x1f, 0xc1, 0x56, 0x5c, 0xaa, 0xea, 0x01, 0x6a, 0xeb,
	0xc2, 0x5d, 0x54, 0x02, 0x2b, 0xe0, 0x33, 0xb4, 0xff, 0x6b, 0x03, 0x5a, 0x76, 0x63, 0xf0, 0x2d,
	0x63, 0x3f, 0x2b, 0x41, 0xa5, 0x57, 0xd3, 0xf7, 0x6b, 0x2d, 0x2c, 0x97, 0x16, 0x05, 0x96, 0x6b,
	0x9e, 0xb1, 0x6d, 0x5a, 0x14, 0x7e, 0x4c, 0xfe, 0x05, 0x6d, 0xc4, 0x19, 0x4d, 0x99, 0x3e, 0x7c,
	0x27, 0x68, 0xd1, 0xa2, 0x98, 0xd1, 0x94, 0xe1, 0xcd, 0xea, 0x88, 0x4c, 0x2a, 0x9a, 0x24, 0xeb,
	0x2b, 0xe8, 0x62, 0xa4, 0x81, 0x7e, 0x8c, 0x4d, 0x45, 0xaf, 0x82, 0x46, 0x3f, 0xd1, 0x15, 0xd3,
	0x77, 0xd1, 0x09, 0x80, 0x16, 0xc5, 0xdc, 0x90, 0xca, 0xc1, 0x0e, 0xa1, 0xbe, 0x0f, 0xe3, 0x30,
	0x31, 0xa4, 0x72, 0xa8, 0x36, 0xaa, 0x75, 0xeb, 0x50, 0xad, 0xd4, 0x1e, 0xb4, 0x72, 0x69, 0x4a,
	0x6c, 0x9b, 0x33, 0xe5, 0x52, 0x57, 0xf8, 0x08, 0x20, 0x97, 0xb7, 0x81, 0x1d, 0xb3, 0x4c, 0xb9,
	0xac, 0xe2, 0x9e, 0x40, 0xd7, 0xb6, 0x2f, 0xcd, 0x63, 0x96, 0x78, 0x60, 0xe6, 0xd6, 0xb0, 0x53,
	0x44, 0x64, 0x1f, 0xda, 0x09, 0x55, 0x5c, 0x95, 0x31, 0xd3, 0x0f, 0x41, 0x27, 0xb8, 0xb5, 0xc9,
	0x43, 0xe8, 0x24, 0x79, 0xb6, 0x32, 0xa2, 0x79, 0x05, 0xd6, 0x00, 0x8b, 0x8a, 0xb8, 0xba, 0xc1,
	0x6b, 0xe9, 0xe9, 0xb6, 0x34, 0xd1, 0xf4, 0x63, 0xf2, 0x2d, 0x34, 0x69, 0x14, 0x31, 0x29, 0xf5,
	0xf2, 0xf7, 0x0f, 0x06, 0x9f, 0x7e, 0xa8, 0xc6, 0xda, 0x47, 0xbf, 0xb9, 0xd6, 0x1f, 0x9b, 0x9e,
	0xe4, 0x11, 0x55, 0x3c, 0xcf, 0x42, 0x2a, 0x18, 0x0d, 0xa3, 0x3c, 0x66, 0xfa, 0x8d, 0xe8, 0x05,
	0x6e, 0xa5, 0x8c, 0x05, 0xa3, 0x93, 0xdc, 0x16, 0xc0, 0x4c, 0x5f, 0x5c, 0x5b, 0x00, 0xc3, 0x8e,
	0xec, 0xff, 0x59, 0x83, 0xa6, 0x79, 0xf5, 0xfe, 0x76, 0x18, 0xfa, 0x50, 0xb7, 0x83, 0xd0, 0x08,
	0xea, 0x3c, 0xd6, 0xdf, 0x31, 0xc5, 0xd2, 0x8d, 0x0d, 0x40, 0xd3, 0x0c, 0xb9, 0xe4, 0xe9, 0xba,
	0xf7, 0xdb, 0x92, 0x23, 0xfe, 0x0f, 0x38, 0x09, 0x97, 0x2a, 0xb4, 0x9a, 0x59, 0x80, 0x0e, 0xa2,
	0x85, 0xd6, 0x9f, 0x41, 0x2f, 0xcf, 0x12, 0x9e, 0xb1, 0x50, 0x30, 0x2a, 0xf3, 0xcc, 0x76, 0xbd,
	0x6b, 0x60, 0xa0, 0x19, 0xf6, 0xdd, 0x3a, 0xe9, 0xe1, 0x6e, 0xe9, 0x43, 0x80, 0x41, 0xfa, 0xeb,
	0x4a, 0xa0, 0xa1, 0xf7, 0xd5, 0x34, 0x5d, 0xff, 0xad, 0x4f, 0x4d, 0x45, 0x8c, 0xff, 0xb5, 0x63,
	0x2a, 0x45, 0xd3, 0x8f, 0x9f, 0x5f, 0x83, 0xb3, 0xf1, 0x35, 0x24, 0x2e, 0x74, 0x83, 0xe9, 0xeb,
	0x8b, 0xe9, 0xe2, 0x3c, 0x3c, 0x9b, 0x4f, 0x67, 0xee, 0x1d, 0x72, 0x0f, 0x76, 0x2a, 0x12, 0x4c,
	0x8f, 0x82, 0xe9, 0xe2, 0xa5, 0x5b, 0x23, 0xbb, 0xe0, 0x56, 0xf0, 0xe4, 0x6c, 0xfc, 0xe2, 0xf4,
	0x2c, 0x98, 0xba, 0xf5, 0xcd, 0xe0, 0xf9, 0xc5, 0xe2, 0xa5, 0xbb, 0xb5, 0x19, 0x7c, 0x31, 0x7b,
	0x35, 0x3b, 0x7b, 0x33, 0x73, 0x1b, 0xcf, 0x7f, 0xaf, 0x81, 0xb3, 0xf1, 0xed, 0x24, 0x3b, 0xe0,
	0x9c, 0x07, 0xe3, 0xa3, 0x23, 0x7f, 0x12, 0x8e, 0xe7, 0x73, 0xf7, 0xce, 0x26, 0x78, 0x33, 0x3d,
	0x74, 0x6b, 0xef, 0x81, 0xf1, 0xdc, 0xad, 0x13, 0x02, 0xfd, 0xb5, 0x87, 0xff, 0x83, 0x3f, 0x73,
	0xb7, 0x36, 0x9d, 0x16, 0x2f, 0x5e, 0xb9, 0x0d, 0x2c, 0xa7, 0x02, 0xfa, 0x2c, 0xdb, 0x58, 0x4e,
	0x45, 0xe6, 0xe3, 0xe0, 0x7c, 0x36, 0x0d, 0xdc, 0xe6, 0x26, 0xac, 0x6a, 0x6c, 0x3d, 0xff, 0xad,
	0x06, 0xb0, 0x1e, 0x35, 0xcc, 0x3d, 0x9e, 0x4c, 0xa6, 0x8b, 0x45, 0xf8, 0xc6, 0x3f, 0xf2, 0xdd,
	0x1a, 0xb9, 0x0b, 0x3d, 0x0b, 0x4e, 0xcf, 0x0e, 0xfd, 0x13, 0x3c, 0xfd, 0x2e, 0xb8, 0xef, 0xa1,
	0xf0, 0xab, 0x63, 0x77, 0xeb, 0x63, 0xfa, 0xf5, 0xb1, 0xdb, 0x20, 0x7d, 0x80, 0x2a, 0xdf, 0xf4,
	0xd0, 0x85, 0x4d, 0x7b, 0x3c, 0x77, 0x1d, 0x3c, 0x9f, 0xb5, 0xab, 0x92, 0xba, 0x87, 0xdf, 0xc0,
	0xc3, 0x28, 0x4f, 0x47, 0xcb, 0x1b, 0xc5, 0x62, 0x9a, 0x45, 0xcc, 0xfc, 0x5e, 0x5b, 0x96, 0x97,
	0xa3, 0x94, 0x0a, 0x9e, 0x1f, 0xde, 0xff, 0xf0, 0x1b, 0x3e, 0x47, 0xfd, 0xaf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x56, 0xab, 0x12, 0xb9, 0xe9, 0x09, 0x00, 0x00,
}
