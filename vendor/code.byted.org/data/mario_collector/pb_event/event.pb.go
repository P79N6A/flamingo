// Code generated by protoc-gen-go. DO NOT EDIT.
// source: event.proto

/*
Package event is a generated protocol buffer package.

It is generated from these files:
	event.proto

It has these top-level messages:
	User
	Header
	Event
	MarioEvents
*/
package pb_event

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type User struct {
	UserUniqueId     *string `protobuf:"bytes,1,req,name=user_unique_id,json=userUniqueId" json:"user_unique_id,omitempty"`
	UserType         *uint32 `protobuf:"varint,2,opt,name=user_type,json=userType" json:"user_type,omitempty"`
	UserId           *uint64 `protobuf:"varint,3,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserIsAuth       *bool   `protobuf:"varint,4,opt,name=user_is_auth,json=userIsAuth" json:"user_is_auth,omitempty"`
	UserIsLogin      *bool   `protobuf:"varint,5,opt,name=user_is_login,json=userIsLogin" json:"user_is_login,omitempty"`
	DeviceId         *uint64 `protobuf:"varint,6,opt,name=device_id,json=deviceId" json:"device_id,omitempty"`
	WebId            *uint64 `protobuf:"varint,7,opt,name=web_id,json=webId" json:"web_id,omitempty"`
	IpAddrId         *uint64 `protobuf:"varint,8,opt,name=ip_addr_id,json=ipAddrId" json:"ip_addr_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *User) GetUserUniqueId() string {
	if m != nil && m.UserUniqueId != nil {
		return *m.UserUniqueId
	}
	return ""
}

func (m *User) GetUserType() uint32 {
	if m != nil && m.UserType != nil {
		return *m.UserType
	}
	return 0
}

func (m *User) GetUserId() uint64 {
	if m != nil && m.UserId != nil {
		return *m.UserId
	}
	return 0
}

func (m *User) GetUserIsAuth() bool {
	if m != nil && m.UserIsAuth != nil {
		return *m.UserIsAuth
	}
	return false
}

func (m *User) GetUserIsLogin() bool {
	if m != nil && m.UserIsLogin != nil {
		return *m.UserIsLogin
	}
	return false
}

func (m *User) GetDeviceId() uint64 {
	if m != nil && m.DeviceId != nil {
		return *m.DeviceId
	}
	return 0
}

func (m *User) GetWebId() uint64 {
	if m != nil && m.WebId != nil {
		return *m.WebId
	}
	return 0
}

func (m *User) GetIpAddrId() uint64 {
	if m != nil && m.IpAddrId != nil {
		return *m.IpAddrId
	}
	return 0
}

type Header struct {
	Headers          *string `protobuf:"bytes,1,opt,name=headers" json:"headers,omitempty"`
	AppId            *uint32 `protobuf:"varint,2,req,name=app_id,json=appId" json:"app_id,omitempty"`
	AppName          *string `protobuf:"bytes,3,opt,name=app_name,json=appName" json:"app_name,omitempty"`
	AppInstallId     *uint64 `protobuf:"varint,4,opt,name=app_install_id,json=appInstallId" json:"app_install_id,omitempty"`
	AppPackage       *string `protobuf:"bytes,5,opt,name=app_package,json=appPackage" json:"app_package,omitempty"`
	AppChannel       *string `protobuf:"bytes,6,opt,name=app_channel,json=appChannel" json:"app_channel,omitempty"`
	AppVersion       *string `protobuf:"bytes,7,opt,name=app_version,json=appVersion" json:"app_version,omitempty"`
	OsName           *string `protobuf:"bytes,8,opt,name=os_name,json=osName" json:"os_name,omitempty"`
	OsVersion        *string `protobuf:"bytes,9,opt,name=os_version,json=osVersion" json:"os_version,omitempty"`
	DeviceModel      *string `protobuf:"bytes,10,opt,name=device_model,json=deviceModel" json:"device_model,omitempty"`
	AbClient         *string `protobuf:"bytes,11,opt,name=ab_client,json=abClient" json:"ab_client,omitempty"`
	AbVersion        *string `protobuf:"bytes,12,opt,name=ab_version,json=abVersion" json:"ab_version,omitempty"`
	TrafficType      *string `protobuf:"bytes,13,opt,name=traffic_type,json=trafficType" json:"traffic_type,omitempty"`
	UtmSource        *string `protobuf:"bytes,14,opt,name=utm_source,json=utmSource" json:"utm_source,omitempty"`
	UtmMedium        *string `protobuf:"bytes,15,opt,name=utm_medium,json=utmMedium" json:"utm_medium,omitempty"`
	UtmCampaign      *string `protobuf:"bytes,16,opt,name=utm_campaign,json=utmCampaign" json:"utm_campaign,omitempty"`
	ClientIp         *string `protobuf:"bytes,17,opt,name=client_ip,json=clientIp" json:"client_ip,omitempty"`
	DeviceBrand      *string `protobuf:"bytes,18,opt,name=device_brand,json=deviceBrand" json:"device_brand,omitempty"`
	OsApi            *uint32 `protobuf:"varint,19,opt,name=os_api,json=osApi" json:"os_api,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Header) Reset()                    { *m = Header{} }
func (m *Header) String() string            { return proto.CompactTextString(m) }
func (*Header) ProtoMessage()               {}
func (*Header) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Header) GetHeaders() string {
	if m != nil && m.Headers != nil {
		return *m.Headers
	}
	return ""
}

func (m *Header) GetAppId() uint32 {
	if m != nil && m.AppId != nil {
		return *m.AppId
	}
	return 0
}

func (m *Header) GetAppName() string {
	if m != nil && m.AppName != nil {
		return *m.AppName
	}
	return ""
}

func (m *Header) GetAppInstallId() uint64 {
	if m != nil && m.AppInstallId != nil {
		return *m.AppInstallId
	}
	return 0
}

func (m *Header) GetAppPackage() string {
	if m != nil && m.AppPackage != nil {
		return *m.AppPackage
	}
	return ""
}

func (m *Header) GetAppChannel() string {
	if m != nil && m.AppChannel != nil {
		return *m.AppChannel
	}
	return ""
}

func (m *Header) GetAppVersion() string {
	if m != nil && m.AppVersion != nil {
		return *m.AppVersion
	}
	return ""
}

func (m *Header) GetOsName() string {
	if m != nil && m.OsName != nil {
		return *m.OsName
	}
	return ""
}

func (m *Header) GetOsVersion() string {
	if m != nil && m.OsVersion != nil {
		return *m.OsVersion
	}
	return ""
}

func (m *Header) GetDeviceModel() string {
	if m != nil && m.DeviceModel != nil {
		return *m.DeviceModel
	}
	return ""
}

func (m *Header) GetAbClient() string {
	if m != nil && m.AbClient != nil {
		return *m.AbClient
	}
	return ""
}

func (m *Header) GetAbVersion() string {
	if m != nil && m.AbVersion != nil {
		return *m.AbVersion
	}
	return ""
}

func (m *Header) GetTrafficType() string {
	if m != nil && m.TrafficType != nil {
		return *m.TrafficType
	}
	return ""
}

func (m *Header) GetUtmSource() string {
	if m != nil && m.UtmSource != nil {
		return *m.UtmSource
	}
	return ""
}

func (m *Header) GetUtmMedium() string {
	if m != nil && m.UtmMedium != nil {
		return *m.UtmMedium
	}
	return ""
}

func (m *Header) GetUtmCampaign() string {
	if m != nil && m.UtmCampaign != nil {
		return *m.UtmCampaign
	}
	return ""
}

func (m *Header) GetClientIp() string {
	if m != nil && m.ClientIp != nil {
		return *m.ClientIp
	}
	return ""
}

func (m *Header) GetDeviceBrand() string {
	if m != nil && m.DeviceBrand != nil {
		return *m.DeviceBrand
	}
	return ""
}

func (m *Header) GetOsApi() uint32 {
	if m != nil && m.OsApi != nil {
		return *m.OsApi
	}
	return 0
}

type Event struct {
	Event            *string `protobuf:"bytes,3,req,name=event" json:"event,omitempty"`
	Time             *uint32 `protobuf:"varint,4,req,name=time" json:"time,omitempty"`
	Params           *string `protobuf:"bytes,5,req,name=params" json:"params,omitempty"`
	SessionId        *string `protobuf:"bytes,6,opt,name=session_id,json=sessionId" json:"session_id,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Event) Reset()                    { *m = Event{} }
func (m *Event) String() string            { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()               {}
func (*Event) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Event) GetEvent() string {
	if m != nil && m.Event != nil {
		return *m.Event
	}
	return ""
}

func (m *Event) GetTime() uint32 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *Event) GetParams() string {
	if m != nil && m.Params != nil {
		return *m.Params
	}
	return ""
}

func (m *Event) GetSessionId() string {
	if m != nil && m.SessionId != nil {
		return *m.SessionId
	}
	return ""
}

type MarioEvents struct {
	Caller           *string  `protobuf:"bytes,1,req,name=caller" json:"caller,omitempty"`
	ServerTime       *uint32  `protobuf:"varint,2,req,name=server_time,json=serverTime" json:"server_time,omitempty"`
	User             *User    `protobuf:"bytes,3,req,name=user" json:"user,omitempty"`
	Header           *Header  `protobuf:"bytes,4,req,name=header" json:"header,omitempty"`
	Events           []*Event `protobuf:"bytes,5,rep,name=events" json:"events,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *MarioEvents) Reset()                    { *m = MarioEvents{} }
func (m *MarioEvents) String() string            { return proto.CompactTextString(m) }
func (*MarioEvents) ProtoMessage()               {}
func (*MarioEvents) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *MarioEvents) GetCaller() string {
	if m != nil && m.Caller != nil {
		return *m.Caller
	}
	return ""
}

func (m *MarioEvents) GetServerTime() uint32 {
	if m != nil && m.ServerTime != nil {
		return *m.ServerTime
	}
	return 0
}

func (m *MarioEvents) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *MarioEvents) GetHeader() *Header {
	if m != nil {
		return m.Header
	}
	return nil
}

func (m *MarioEvents) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

func init() {
	proto.RegisterType((*User)(nil), "User")
	proto.RegisterType((*Header)(nil), "Header")
	proto.RegisterType((*Event)(nil), "Event")
	proto.RegisterType((*MarioEvents)(nil), "MarioEvents")
}

func init() { proto.RegisterFile("event.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 680 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x94, 0x4d, 0x6f, 0x9b, 0x4c,
	0x10, 0xc7, 0x85, 0x03, 0xd8, 0x0c, 0x76, 0xf2, 0x3c, 0xfb, 0xbc, 0x74, 0xa3, 0x26, 0x8d, 0x6b,
	0xf5, 0xe0, 0x93, 0x0f, 0xb9, 0xf6, 0x94, 0x44, 0x95, 0x8a, 0xd4, 0x54, 0x11, 0x4d, 0x7a, 0xe8,
	0x05, 0x2d, 0xec, 0x26, 0x5e, 0x15, 0xd8, 0x2d, 0x0b, 0x8e, 0xf2, 0x75, 0xfa, 0x85, 0xfa, 0x7d,
	0x7a, 0xaa, 0x66, 0x16, 0x47, 0xb9, 0x31, 0xbf, 0x79, 0xfb, 0x0f, 0xcc, 0x00, 0xa9, 0xda, 0xa9,
	0xb6, 0xdf, 0xd8, 0xce, 0xf4, 0x66, 0xf5, 0x3b, 0x80, 0xf0, 0xce, 0xa9, 0x8e, 0xbd, 0x83, 0xc3,
	0xc1, 0xa9, 0xae, 0x18, 0x5a, 0xfd, 0x63, 0x50, 0x85, 0x96, 0x3c, 0x58, 0x4e, 0xd6, 0x49, 0x3e,
	0x47, 0x7a, 0x47, 0x30, 0x93, 0xec, 0x35, 0x24, 0x14, 0xd5, 0x3f, 0x59, 0xc5, 0x27, 0xcb, 0x60,
	0xbd, 0xc8, 0x67, 0x08, 0x6e, 0x9f, 0xac, 0x62, 0xaf, 0x60, 0x4a, 0x4e, 0x2d, 0xf9, 0xc1, 0x32,
	0x58, 0x87, 0x79, 0x8c, 0x66, 0x26, 0xd9, 0x12, 0xe6, 0xde, 0xe1, 0x0a, 0x31, 0xf4, 0x5b, 0x1e,
	0x2e, 0x83, 0xf5, 0x2c, 0x07, 0xf2, 0xba, 0x8b, 0xa1, 0xdf, 0xb2, 0x15, 0x2c, 0xf6, 0x11, 0xb5,
	0x79, 0xd0, 0x2d, 0x8f, 0x28, 0x24, 0xf5, 0x21, 0x9f, 0x10, 0x61, 0x6f, 0xa9, 0x76, 0xba, 0x22,
	0x71, 0x31, 0x35, 0x98, 0x79, 0x90, 0x49, 0xf6, 0x1f, 0xc4, 0x8f, 0xaa, 0x44, 0xcf, 0x94, 0x3c,
	0xd1, 0xa3, 0x2a, 0x33, 0xc9, 0x4e, 0x00, 0xb4, 0x2d, 0x84, 0x94, 0xa4, 0x6a, 0xe6, 0x93, 0xb4,
	0xbd, 0x90, 0xb2, 0xcb, 0xe4, 0xea, 0x57, 0x08, 0xf1, 0x47, 0x25, 0xa4, 0xea, 0x18, 0x87, 0xe9,
	0x96, 0x9e, 0x1c, 0x0f, 0x96, 0xc1, 0x3a, 0xc9, 0xf7, 0x26, 0x56, 0x16, 0xd6, 0x62, 0xfa, 0x64,
	0x39, 0x59, 0x2f, 0xf2, 0x48, 0x58, 0x9b, 0x49, 0x76, 0x0c, 0x33, 0xc4, 0xad, 0x68, 0x14, 0x4d,
	0x9b, 0xe4, 0x53, 0x61, 0xed, 0x67, 0xd1, 0x28, 0x7c, 0x95, 0x94, 0xd1, 0xba, 0x5e, 0xd4, 0x35,
	0x66, 0x86, 0xd4, 0x78, 0x8e, 0x99, 0x1e, 0x66, 0x92, 0x9d, 0x41, 0x8a, 0x51, 0x56, 0x54, 0xdf,
	0xc5, 0x83, 0xa2, 0x81, 0x93, 0x1c, 0x84, 0xb5, 0x37, 0x9e, 0xec, 0x03, 0xaa, 0xad, 0x68, 0x5b,
	0x55, 0xd3, 0xc4, 0x3e, 0xe0, 0xca, 0x93, 0x7d, 0xc0, 0x4e, 0x75, 0x4e, 0x9b, 0x96, 0x06, 0xf7,
	0x01, 0x5f, 0x3d, 0xc1, 0x0f, 0x62, 0x9c, 0x97, 0x38, 0x23, 0x67, 0x6c, 0x1c, 0x29, 0x3c, 0x05,
	0x30, 0xee, 0x39, 0x31, 0x21, 0x5f, 0x62, 0xdc, 0x3e, 0xef, 0x2d, 0xcc, 0xc7, 0x37, 0xdd, 0x18,
	0xa9, 0x6a, 0x0e, 0x14, 0x90, 0x7a, 0x76, 0x8d, 0x08, 0x3f, 0x86, 0x28, 0x8b, 0xaa, 0xd6, 0xaa,
	0xed, 0x79, 0x4a, 0xfe, 0x99, 0x28, 0xaf, 0xc8, 0xc6, 0xf2, 0xa2, 0x7c, 0x2e, 0x3f, 0xf7, 0xe5,
	0x45, 0xf9, 0xa2, 0x7c, 0xdf, 0x89, 0xfb, 0x7b, 0x5d, 0xf9, 0x3d, 0x5a, 0xf8, 0xf2, 0x23, 0xa3,
	0x55, 0x3a, 0x05, 0x18, 0xfa, 0xa6, 0x70, 0x66, 0xe8, 0x2a, 0xc5, 0x0f, 0x7d, 0x85, 0xa1, 0x6f,
	0xbe, 0x10, 0xd8, 0xbb, 0x1b, 0x25, 0xf5, 0xd0, 0xf0, 0xa3, 0x67, 0xf7, 0x35, 0x01, 0x6c, 0x80,
	0xee, 0x4a, 0x34, 0x56, 0xe8, 0x87, 0x96, 0xff, 0xe5, 0x1b, 0x0c, 0x7d, 0x73, 0x35, 0x22, 0xd4,
	0xef, 0xc5, 0x17, 0xda, 0xf2, 0xbf, 0xbd, 0x7e, 0x0f, 0x32, 0xfb, 0x62, 0xfe, 0xb2, 0x13, 0xad,
	0xe4, 0xec, 0xe5, 0xfc, 0x97, 0x88, 0x70, 0x2b, 0x8c, 0x2b, 0x84, 0xd5, 0xfc, 0x1f, 0xba, 0x82,
	0xc8, 0xb8, 0x0b, 0xab, 0x57, 0x5b, 0x88, 0x3e, 0xe0, 0x75, 0xb1, 0x7f, 0x21, 0xa2, 0x33, 0xe3,
	0x07, 0x74, 0x45, 0xde, 0x60, 0x0c, 0xc2, 0x5e, 0x37, 0x8a, 0x87, 0xb4, 0x49, 0xf4, 0xcc, 0xfe,
	0x87, 0xd8, 0x8a, 0x4e, 0x34, 0x8e, 0x47, 0x14, 0x3a, 0x5a, 0x38, 0xa3, 0x53, 0x0e, 0x5f, 0xd8,
	0x7e, 0xdf, 0x93, 0x3c, 0x19, 0x49, 0x26, 0x57, 0x3f, 0x03, 0x48, 0xaf, 0x45, 0xa7, 0x0d, 0xf5,
	0x73, 0x58, 0xa6, 0x12, 0x75, 0xad, 0xba, 0xf1, 0x6e, 0x47, 0x0b, 0x97, 0xc4, 0xa9, 0x6e, 0x87,
	0x37, 0x8b, 0x9d, 0xfd, 0x0e, 0x83, 0x47, 0xb7, 0xd8, 0xff, 0x18, 0x42, 0xbc, 0x32, 0x12, 0x9a,
	0x9e, 0x47, 0x1b, 0xfc, 0x1b, 0xe4, 0x84, 0xd8, 0x19, 0xc4, 0xfe, 0x0a, 0x48, 0x70, 0x7a, 0x3e,
	0xdd, 0xf8, 0x6b, 0xc9, 0x47, 0xcc, 0xde, 0x40, 0x4c, 0x83, 0xa1, 0xf6, 0x83, 0x75, 0x7a, 0x1e,
	0x6f, 0x48, 0x4d, 0x3e, 0xd2, 0xcb, 0xf7, 0x70, 0x52, 0x99, 0x66, 0x53, 0x3e, 0xf5, 0x4a, 0x8a,
	0xb6, 0x52, 0xfe, 0xa7, 0x53, 0x0e, 0xf7, 0x9b, 0x06, 0xa5, 0x5f, 0x02, 0x85, 0xdf, 0x20, 0xfc,
	0x76, 0x44, 0xa8, 0xa8, 0x4c, 0x5d, 0xab, 0xaa, 0x37, 0xdd, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff,
	0xb7, 0x1e, 0x62, 0xac, 0xa8, 0x04, 0x00, 0x00,
}
